
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'check.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import cv2
import numpy as np
import datetime
import os.path


#from keras.models import model_from_json
#from keras.preprocessing import image




class Ui_OutputDialog(object):
    def setupUi(self, OutputDialog):
        OutputDialog.setObjectName("OutputDialog")
        OutputDialog.resize(840, 480)
        OutputDialog.setMinimumSize(QtCore.QSize(0, 0))
        OutputDialog.setMaximumSize(QtCore.QSize(840, 480))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setBold(True)
        font.setWeight(75)
        OutputDialog.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        OutputDialog.setWindowIcon(icon)
        
        #self.model = model_from_json(opne("fer.json", "r").read())
        #self.model.load_weights('fer.h5')
        #self.face_haar_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        
        self.stop = True
        self.imgLabel = QtWidgets.QLabel(OutputDialog)
        self.imgLabel.setGeometry(QtCore.QRect(-60, 0, 600, 300))
        self.imgLabel.setMaximumSize(QtCore.QSize(600, 300))
        self.imgLabel.setText("")
        self.imgLabel.setObjectName("imgLabel")
        self.horizontalLayoutWidget = QtWidgets.QWidget(OutputDialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 330, 521, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.chooseButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.chooseButton.setObjectName("chooseButton")
        self.filename =""
        self.chooseButton.clicked.connect(self.chooseFile_)
        
        print(self.filename)
        self.horizontalLayout.addWidget(self.chooseButton)
        self.startButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.startButton.setObjectName("startButton")
        self.startButton.clicked.connect(self.startButton_)
        self.horizontalLayout.addWidget(self.startButton)
        self.stopButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.stopButton.setObjectName("stopButton")
        self.stopButton.clicked.connect(self.stopButton_)
        self.horizontalLayout.addWidget(self.stopButton)
        self.imgLabel_2 = QtWidgets.QLabel(OutputDialog)
        self.imgLabel_2.setGeometry(QtCore.QRect(590, 10, 220, 300))
        self.imgLabel_2.setMaximumSize(QtCore.QSize(220, 300))
        self.imgLabel_2.setText("")
        self.imgLabel_2.setObjectName("imgLabel_2")

        self.retranslateUi(OutputDialog)
        QtCore.QMetaObject.connectSlotsByName(OutputDialog)

    def retranslateUi(self, OutputDialog):
        _translate = QtCore.QCoreApplication.translate
        OutputDialog.setWindowTitle(_translate("OutputDialog", "Output Window"))
        self.chooseButton.setText(_translate("OutputDialog", "choose file "))
        self.startButton.setText(_translate("OutputDialog", "start"))
        self.stopButton.setText(_translate("OutputDialog", "stop"))
        
    def chooseFile_(self):
		#file choosing
        print('getting...') 
        self.filename=""
        self.filename, dummy = QFileDialog.getOpenFileName(self.chooseButton, "open video file.", '~/desktop', "video files (*.mp4)")
	    
    def startButton_(self):
		#startButton
        self.stop=False
        self.startVideo()
        
		
    def stopButton_(self):
		#stop button
        #self.filename=""
        self.stop=True
        he="jj"

    @pyqtSlot()
    def startVideo(self, camera_name=""):
        """
        :param camera_name: link of camera or usb camera
        :return:
        """
        if self.stop:
            return
        
        videoFile = self.filename
        
        if len(videoFile) == 1:
        	return
        else:
        	self.capture = cv2.VideoCapture(videoFile)
        self.timer = QtCore.QTimer()  # Create Timer
        path = 'ImagesAttendance'
        if not os.path.exists(path):
            os.mkdir(path)
        # known face encoding and known face name list
        images = []
        self.class_names = []
        self.encode_list = []
        #attendance_list = os.listdir(path)
        
        print(type(self.capture))
        
        
        
        self.timer.timeout.connect(self.update_frame)  # Connect timeout to the output function
        self.timer.start(40)  # emit the timeout() signal at x=40ms

    def update_frame(self):
        ret, self.image = self.capture.read()
        
        if not ret or self.stop:
            return 
        
        #print(self.image.shape())
        self.displayImage(self.image, self.encode_list, self.class_names, 1)
        
    def displayImage(self, image, encode_list, class_names, window=1):
        """
        :param image: frame from camera
        :param encode_list: known face encoding list
        :param class_names: known face names
        :param window: number of window
        :return:
        """
        print(type(image))
        print("bugging..")
        image = cv2.resize(image, (640, 480))
        try:
            image = self.face_rec_(image, encode_list, class_names)
        except Exception as e:
            print(e)
        qformat = QImage.Format_Indexed8
        if len(image.shape) == 3:
            if image.shape[2] == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
        outImage = QImage(image, image.shape[1], image.shape[0], image.strides[0], qformat)
        self.outImage = outImage.rgbSwapped()
        
        
        

        if window == 1:
            self.imgLabel.setPixmap(QPixmap.fromImage(self.outImage))
            self.imgLabel.setScaledContents(True)        
    
    @pyqtSlot()
    def face_emo(self):
		#face emotion
        he = "jj"
		
		
		
		
import resource



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    OutputDialog = QtWidgets.QDialog()
    ui = Ui_OutputDialog()
    ui.setupUi(OutputDialog)
    OutputDialog.show()
    sys.exit(app.exec_())

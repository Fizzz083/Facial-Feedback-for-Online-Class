# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fer_15_3_2021.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# Facial Feedback system of e-learning using FER

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtChart import *
import cv2
import numpy as np
import datetime
import os.path

from keras.models import model_from_json
from keras.preprocessing import image

# load model
model = model_from_json(open("fer82.json", "r").read())
# load weights
model.load_weights('fer82.h5')

face_haar_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')



class Ui_OutputDialog(QDialog):
    def __init__(self, *args, **kwargs):
        super(Ui_OutputDialog, self).__init__(*args, **kwargs)
        self.setObjectName("self")       
        self.resize(1240, 480)
        self.setMinimumSize(QtCore.QSize(0, 0))
        self.setMaximumSize(QtCore.QSize(1240, 480))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setBold(True)
        font.setWeight(75)
        self.setFont(font)
       
        self.imgLabel = QtWidgets.QLabel(self)
        self.imgLabel.setGeometry(QtCore.QRect(8, 20, 600, 300))
        self.imgLabel.setMaximumSize(QtCore.QSize(600, 300))
        self.imgLabel.setText("")
        self.imgLabel.setObjectName("imgLabel")
        #self.imgLabel.clicked.connect(self.chooseFile_)

        
        images = []
        self.class_names = []
        self.encode_list = []

        self.coverImg=cv2.imread("c3.jpg")
        #print("hello..")
        #print(self.coverImg)
        

        
        
        self.horizontalLayoutWidget = QtWidgets.QWidget(self)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(60, 360, 421, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        
        self.filename =""

        self.HappyCount = 0
        self.SadCount = 0
        self.AngryCount = 0
        self.FearCount = 0
        self.DisgustCount = 0
        self.SurpriseCount = 0
        self.NeutralCount = 0
        self.ContemptCount = 0
        self.frame_count = 0
        self.pause = 0

        self.choosebutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.choosebutton.setObjectName("choosebutton")
        self.choosebutton.clicked.connect(self.chooseFile_)
        self.horizontalLayout.addWidget(self.choosebutton)


        self.startbutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.startbutton.setObjectName("startbutton")
        self.startbutton.clicked.connect(self.startButton_)
        self.horizontalLayout.addWidget(self.startbutton)
        
        self.stopbutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.stopbutton.setObjectName("stopbutton")
        self.stopbutton.clicked.connect(self.stopButton_)
        self.horizontalLayout.addWidget(self.stopbutton)

        self.pausebutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pausebutton.setObjectName("pausebutton")

        self.pausebutton.clicked.connect(self.pauseButton_)
        self.horizontalLayout.addWidget(self.pausebutton)
        
        self.exitbutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.exitbutton.setObjectName("startbutton")
        self.exitbutton.clicked.connect(self.exitButton_)
        self.horizontalLayout.addWidget(self.exitbutton)
        
        self.graphicsView = QChartView(self)
        self.graphicsView.setGeometry(QtCore.QRect(550, 10, 691, 321))
        self.graphicsView.setObjectName("graphicsView")
        
        self.result = QtWidgets.QLabel(self)
        self.result.setGeometry(QtCore.QRect(560, 360, 291, 81))
        self.result.setObjectName("result")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.displayImage(self.coverImg, 1)

        print("second")
    def exitButton_(self):
        self.hide()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "Test Window"))
        self.choosebutton.setText(_translate("self", "choose"))
        self.startbutton.setText(_translate("self", "start"))
        self.stopbutton.setText(_translate("self", "stop"))
        self.pausebutton.setText(_translate("self", "pause"))
        self.result.setText(_translate("self", "Result will be shown here"))
        self.exitbutton.setText(_translate("self", "Exit"))
        
    def chooseFile_(self):
		#file choosing
        self.clear()
        print('getting...') 
        self.filename=""
        self.filename, dummy = QFileDialog.getOpenFileName(self.choosebutton, "open video file.", '~/desktop', "video files (*.mp4)")
	    
        
    
    def clear(self):
        self.filename =""

        self.HappyCount = 0
        self.SadCount = 0
        self.AngryCount = 0
        self.FearCount = 0
        self.DisgustCount = 0
        self.SurpriseCount = 0
        self.NeutralCount = 0
        self.ContemptCount = 0
        self.frame_count = 0
        self.pause = 0
        self.create_bar()

        #self.write_test()



    def startButton_(self):
		#startButton

        

        self.stop=False
        self.startVideo()

        
		
    def stopButton_(self):
		#stop button
        #self.filename=""
        self.stop=True
        he="jj"
    def pauseButton_(self):
		#stop button
        #self.filename=""
        #self.stop=True
        he="jj"
        if(self.pause==0):
            self.pausebutton.setText( "resume")
            self.pause = 1
        else:
            self.pausebutton.setText( "pause")
            self.pause=0


    @pyqtSlot()
    def startVideo(self, camera_name=""):
        """
        :param camera_name: link of camera or usb camera
        :return:
        """
        if self.stop:
            return
        
        videoFile = self.filename
        
        if len(videoFile) == 1:
        	return
        else:
        	self.capture = cv2.VideoCapture(videoFile)
        self.timer = QtCore.QTimer()  # Create Timer
        #path = 'ImagesAttendance'
        #if not os.path.exists(path):
        #    os.mkdir(path)
        # known face encoding and known face name list
        #attendance_list = os.listdir(path)
        
        #print(type(self.capture))
        
        
        #if(self.pause==0):
        self.timer.timeout.connect(self.update_frame)  # Connect timeout to the output function
        self.timer.start(0)  # emit the timeout() signal at x=10ms

    def update_frame(self):
        if(self.pause==1):
            return
        ret, self.image = self.capture.read()

        
        if not ret or self.stop:
            return 
        
        self.frame_count+=1
        #if(self.frame_count%5!=1 ):
        #    return

        self.face_emo_frame = self.face_emo(self.image)
        self.image = self.face_emo_frame

        #print(self.image.shape())
        self.displayImage(self.image, 1)
        
    def displayImage(self, image, window=1):
        """
        :param image: frame from camera
        :param encode_list: known face encoding list
        :param class_names: known face names
        :param window: number of window
        :return:
        """
        #print(type(image))
        #print("bugging..")
        image = cv2.resize(image, (640, 480))
        try:
            image = self.face_emo(image)
        except Exception as e:
            print(e)
        qformat = QImage.Format_Indexed8
        if len(image.shape) == 3:
            if image.shape[2] == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
        outImage = QImage(image, image.shape[1], image.shape[0], image.strides[0], qformat)
        self.outImage = outImage.rgbSwapped()
        
        
        

        if window == 1:
            self.imgLabel.setPixmap(QPixmap.fromImage(self.outImage))
            self.imgLabel.setScaledContents(True)  
        self.create_bar()      
    
    @pyqtSlot()
    def face_emo(self, test_img):
		#face emotion
        #he = "jj"
        
        gray_img = cv2.cvtColor(test_img, cv2.COLOR_BGR2GRAY)

        faces_detected = face_haar_cascade.detectMultiScale(gray_img, 1.32, 5)
        for (x, y, w, h) in faces_detected:
            cv2.rectangle(test_img, (x, y), (x+w, y+h), (255, 0, 0), thickness=7)
            # cropping region of interest i.e. face area from  image
            roi_gray=gray_img[y:y+w, x:x+h]
            roi_gray=cv2.resize(roi_gray, (48, 48))
            img_pixels = image.img_to_array(roi_gray)
            img_pixels = np.expand_dims(img_pixels, axis=0)
            img_pixels /= 255
            predictions = model.predict(img_pixels)

            # find max indexed array
            max_idx = np.argmax(predictions[0])

            emotions = ('angry', 'disgust', 'fear', 'happy', 'sad', 'surprise', 'neutral')
            predicted_emotion = emotions[max_idx]
            if(max_idx==3):
                self.HappyCount+=1
            if(max_idx==1):
                self.DisgustCount+=1
            if(max_idx==2):
                self.FearCount+=1
            if(max_idx==0):
                self.AngryCount+=1
            if(max_idx==4):
                self.SadCount+=1
            if(max_idx==5):
                self.SurpriseCount+=1
            if(max_idx==6):
                self.NeutralCount+=1


            cv2.putText(test_img, predicted_emotion, (int(x), int(y)), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)



        self.write_test()

        return test_img
        
    def create_bar(self):
        #The QBarSet class represents a set of bars in the bar chart.
        # It groups several bars into a bar set
        
        
        

        set0 = QBarSet("Count")
        
        set0 << self.HappyCount << self.SadCount << self.AngryCount << self.FearCount << self.DisgustCount << self.SurpriseCount << self.NeutralCount 


        series = QBarSeries()
        series.append(set0)


        chart = QChart()
        chart.addSeries(series)
        chart.setTitle("Emotion")
        
        #chart.setAnimationOptions(QChart.SeriesAnimations)
        labelsFont = QFont()
        labelsFont.setPixelSize(12)
        #axisPen = QPen()
        #axisPen.setWidth(4);
        
        #series.setLinePen(axisPen)

        categories = ["Happy", "Sad", "Angry", "Fear", "Disgust", "Surprise", "Neutral"]
        axis = QBarCategoryAxis()
        axis.setLabelsFont(labelsFont)
        #axis.setLinePen(axisPen);
        axis.append(categories)
        chart.createDefaultAxes()
        chart.setAxisX(axis, series)
        #chart.getAxis('X').tickFont = font
        
        #chart.legend().font  = 2

        chart.legend().setVisible(True)
        chart.legend().setAlignment(Qt.AlignBottom)

        chartView = QChartView(chart)
        chartView.setRenderHint(QPainter.Antialiasing)

        self.graphicsView.setChart(chart)
        #self.graphicsView.setRenderHint(QtGui.QPainter.Antialiasing)
    @pyqtSlot()
    def write_test(self):
        
        text = "No count"
        count = 0

        if(self.HappyCount>count):
            text="Happy"
            count = self.HappyCount
        if(self.SadCount>count):
            text="Sad"
            count = self.SadCount
        if(self.FearCount>count):
            text="Fear"
            count = self.FearCount
        if(self.NeutralCount>count):
            text="Neutral"
            count = self.NeutalCount
        if(self.DisgustCount>count):
            text="Disgust"
            count = self.DisgustCount
        if(self.SurpriseCount>count):
            text="Surprise"
            count = self.SurpriseCount
        if(self.AngryCount>count):
            text="Angry"
            count = self.AngryCount
        if(count==0):
            self.result.setText("Final result will be shown here")
        else:
            self.result.setText("Result : "+text)

		
		
#import resource_rc


def run_test():
    self = QtWidgets.QDialog()
    ui = Ui_OutputDialog()
    ui.setupUi(self)
    self.setWindowTitle("Face Emotion Detection")
    self.show()

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fer_15_3_2021.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# Facial Feedback system of e-learning using FER


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtChart import *
import cv2
import numpy as np
import datetime
import os.path

from numpy.core.numeric import outer
import testWindow
from testWindow import Ui_OutputDialog  #testWindow
from trainWindow import Ui_trainWindow

from keras.models import model_from_json
from keras.preprocessing import image


class Ui_MainWindow(QDialog):
    def __init__(self, *args, **kwargs):
        super(Ui_MainWindow, self).__init__(*args, **kwargs)
        
        self.setObjectName("self")       
        self.resize(1240, 480)
        self.setMinimumSize(QtCore.QSize(0, 0))
        self.setMaximumSize(QtCore.QSize(1240, 480))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setBold(True)
        font.setWeight(75)
        self.setFont(font)

        self.second = None #train_window
        self.third = None #test_window

        self.imgLabel = QtWidgets.QLabel(self)
        self.imgLabel.setGeometry(QtCore.QRect(320, 20, 600, 300))
        self.imgLabel.setMaximumSize(QtCore.QSize(600, 300))
        self.imgLabel.setText("")
        self.imgLabel.setObjectName("imgLabel")
        
        self.coverImg=cv2.imread("c3.jpg")
        self.displayImage(self.coverImg, 1 )

        self.horizontalLayoutWidget = QtWidgets.QWidget(self)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(120, 340, 1000, 100))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.choosebutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.choosebutton.setObjectName("choosebutton")
        self.choosebutton.clicked.connect(self.trainButton_)
        self.horizontalLayout.addWidget(self.choosebutton)

        self.startbutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.startbutton.setObjectName("startbutton")
        self.startbutton.clicked.connect(self.testButton_)
        self.horizontalLayout.addWidget(self.startbutton)
        
        self.exitbutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.exitbutton.setObjectName("startbutton")
        self.exitbutton.clicked.connect(self.exitButton_)
        self.horizontalLayout.addWidget(self.exitbutton)
        
        self.retranslateUi()
        
    def exitButton_(self):
        
        sys.exit(app.exec_())

    def displayImage(self, image, window=1):
        """
        :param image: frame from camera
        :param encode_list: known face encoding list
        :param class_names: known face names
        :param window: number of window
        :return:
        """
        #print(type(image))
        #print("bugging..")
        image = cv2.resize(image, (640, 480))
        try:
            image = self.face_emo(image)
        except Exception as e:
            print(e)
        qformat = QImage.Format_Indexed8
        if len(image.shape) == 3:
            if image.shape[2] == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
        outImage = QImage(image, image.shape[1], image.shape[0], image.strides[0], qformat)
        self.outImage = outImage.rgbSwapped()
        
        
        

        if window == 1:
            self.imgLabel.setPixmap(QPixmap.fromImage(self.outImage))
            self.imgLabel.setScaledContents(True)  
        #self.create_bar()   
    
    def testButton_(self):
        #self.hide()
        #app_fe.run_test()
        #self.hide()
        #self_ = QtWidgets.QDialog()
        self.second = Ui_OutputDialog()
        self.second.show()
        print("done")
        #ui = Ui_self()
        #ui.setupUi(self_)
        #self_.setWindowTitle("Face Emotion Detection")
        
        #print(type(self_))
        
        
        #self.setWindowTitle("Face Emotion Detection")
        #self.show()
    def trainButton_(self):
        self.third = Ui_trainWindow()
        self.third.show()
        #ui = Ui_self()
        #ui.setupUi(self_)
        #self_.setWindowTitle("Face Emotion Detection")
        

    @pyqtSlot()
    def face_emo(self, test_img):
        return test_img


	
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "Main Window"))
        self.choosebutton.setText(_translate("self", "Train"))
        self.startbutton.setText(_translate("self", "Test"))
        self.exitbutton.setText(_translate("self", "Exit"))
        

#import resource_rc


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    ui = Ui_MainWindow()
    #ui.setupUi(ui)
    #self.setWindowTitle("Face Emotion Detection")
    ui.show()
    sys.exit(app.exec_())

